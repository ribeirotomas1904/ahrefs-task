// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fetch from "./Fetch.res.mjs";
import * as React from "react";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__JSON from "@rescript/core/src/Core__JSON.res.mjs";
import * as Extensions from "./Extensions.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import CountrySelectModuleCss from "./CountrySelect.module.css";

var css = CountrySelectModuleCss;

function parseCountries(json) {
  return Core__Option.flatMap(Core__JSON.Decode.array(json), (function (value) {
                return Extensions.$$Array.sequence(value.map(function (value) {
                                return Core__Option.flatMap(Core__JSON.Decode.object(value), (function (value) {
                                              var match = Object.entries(value).length === 2;
                                              var match$1 = Core__Option.flatMap(value["label"], Core__JSON.Decode.string);
                                              var match$2 = Core__Option.flatMap(value["value"], Core__JSON.Decode.string);
                                              if (match && match$1 !== undefined && match$2 !== undefined) {
                                                return {
                                                        label: match$1,
                                                        value: match$2
                                                      };
                                              }
                                              
                                            }));
                              }));
              }));
}

function reducer(state, action) {
  if (typeof action !== "object") {
    if (action === "StartLoading") {
      if (typeof state !== "object" && state === "Initial") {
        return "Loading";
      } else {
        return state;
      }
    } else if (typeof state !== "object" && state === "Loading") {
      return "Error";
    } else {
      return state;
    }
  }
  switch (action.TAG) {
    case "Load" :
        if (typeof state !== "object" && state === "Loading") {
          return {
                  TAG: "Loaded",
                  countryOptions: action._0,
                  searchInput: "",
                  optionsViewportStart: 0,
                  optionsViewportEnd: 19
                };
        } else {
          return state;
        }
    case "SetSearchInput" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: action._0,
                  optionsViewportStart: state.optionsViewportStart,
                  optionsViewportEnd: state.optionsViewportEnd
                };
        }
    case "SetOptionsViewport" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: state.searchInput,
                  optionsViewportStart: action.optionsViewportStart,
                  optionsViewportEnd: action.optionsViewportEnd
                };
        }
    
  }
}

function CountrySelect$CountryOption(props) {
  var label = props.label;
  console.log(label);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("span", {
                      className: "fi fi-" + props.value
                    }),
                label
              ],
              className: css["country-option"],
              style: {
                position: "absolute",
                top: props.top,
                width: "100%"
              },
              onClick: props.onClick
            });
}

var CountryOption = {
  make: CountrySelect$CountryOption
};

function CountrySelect(props) {
  var onChange = props.onChange;
  var match = React.useReducer(reducer, "Initial");
  var dispatch = match[1];
  var state = match[0];
  var viewportRef = React.useRef(null);
  React.useEffect((function () {
          var controller = new AbortController();
          dispatch("StartLoading");
          Fetch.get("https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json", Caml_option.some(controller.signal)).then(function (prim) {
                  return prim.json();
                }).then(function (json) {
                console.log(json);
                var countries = parseCountries(json);
                if (countries !== undefined) {
                  return dispatch({
                              TAG: "Load",
                              _0: countries
                            });
                } else {
                  return dispatch("Error");
                }
              });
          return (function () {
                    controller.abort();
                  });
        }), []);
  var onScroll = function (param) {
    Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
            var optionsViewportStart = viewport.scrollTop / 27 | 0;
            dispatch({
                  TAG: "SetOptionsViewport",
                  optionsViewportStart: optionsViewportStart,
                  optionsViewportEnd: (optionsViewportStart + 20 | 0) - 1 | 0
                });
          }));
  };
  if (typeof state !== "object") {
    switch (state) {
      case "Initial" :
          return "initial";
      case "Loading" :
          return "loading";
      case "Error" :
          return "error";
      
    }
  } else {
    var optionsViewportStart = state.optionsViewportStart;
    var searchInput = state.searchInput;
    var countryOptions = state.countryOptions;
    var countryOptionsFiltered = countryOptions.filter(function (countryOption) {
          return countryOption.label.toLowerCase().includes(searchInput.trim().toLowerCase());
        });
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                        children: Core__Option.getOr(Core__Option.flatMap(Core__Option.flatMap(props.country, (function (country) {
                                        return countryOptions.find(function (countryOption) {
                                                    return countryOption.value === country;
                                                  });
                                      })), (function (countryOption) {
                                    return Caml_option.some(JsxRuntime.jsxs("div", {
                                                    children: [
                                                      JsxRuntime.jsx("span", {
                                                            className: "fi fi-" + countryOption.value
                                                          }),
                                                      " ",
                                                      countryOption.label
                                                    ]
                                                  }));
                                  })), null)
                      }),
                  JsxRuntime.jsx("input", {
                        value: searchInput,
                        onChange: (function (e) {
                            dispatch({
                                  TAG: "SetSearchInput",
                                  _0: e.target.value
                                });
                          })
                      }),
                  JsxRuntime.jsx("div", {
                        children: JsxRuntime.jsx("div", {
                              children: countryOptionsFiltered.slice(Core__Int.clamp(0, undefined, optionsViewportStart - 10 | 0), (state.optionsViewportEnd + 1 | 0) + 10 | 0).map(function (countryOption, index) {
                                    return JsxRuntime.jsx(CountrySelect$CountryOption, {
                                                label: countryOption.label,
                                                value: countryOption.value,
                                                onClick: (function (param) {
                                                    onChange(countryOption.value);
                                                  }),
                                                top: Math.imul(optionsViewportStart + index | 0, 27).toString() + "px"
                                              }, countryOption.value);
                                  }),
                              style: {
                                height: Math.imul(countryOptionsFiltered.length, 27).toString() + "px",
                                position: "absolute",
                                width: "100%"
                              }
                            }),
                        ref: Caml_option.some(viewportRef),
                        className: css.dropdown,
                        style: {
                          height: Math.imul(Math.min(countryOptionsFiltered.length, 20), 27).toString() + "px"
                        },
                        onScroll: onScroll
                      })
                ]
              });
  }
}

var maxVisibleCountryOptions = 20;

var renderOutOfViewport = 10;

var countryOptionHeight = 27;

var initialState = "Initial";

var make = CountrySelect;

export {
  css ,
  maxVisibleCountryOptions ,
  renderOutOfViewport ,
  countryOptionHeight ,
  parseCountries ,
  reducer ,
  initialState ,
  CountryOption ,
  make ,
}
/* css Not a pure module */

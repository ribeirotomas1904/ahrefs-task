// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fetch from "./Fetch.res.mjs";
import * as React from "react";
import * as Core__JSON from "@rescript/core/src/Core__JSON.res.mjs";
import * as Extensions from "./Extensions.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import CountrySelectModuleCss from "./CountrySelect.module.css";

var css = CountrySelectModuleCss;

function parseCountries(json) {
  return Core__Option.flatMap(Core__JSON.Decode.array(json), (function (value) {
                return Extensions.$$Array.sequence(value.map(function (value) {
                                return Core__Option.flatMap(Core__JSON.Decode.object(value), (function (value) {
                                              var match = Object.entries(value).length === 2;
                                              var match$1 = Core__Option.flatMap(value["label"], Core__JSON.Decode.string);
                                              var match$2 = Core__Option.flatMap(value["value"], Core__JSON.Decode.string);
                                              if (match && match$1 !== undefined && match$2 !== undefined) {
                                                return {
                                                        label: match$1,
                                                        value: match$2
                                                      };
                                              }
                                              
                                            }));
                              }));
              }));
}

function reducer(state, action) {
  if (typeof action !== "object") {
    if (action === "StartLoading") {
      if (typeof state !== "object" && state === "Initial") {
        return "Loading";
      } else {
        return state;
      }
    } else if (typeof state !== "object" && state === "Loading") {
      return "Error";
    } else {
      return state;
    }
  } else if (action.TAG === "Load") {
    if (typeof state !== "object" && state === "Loading") {
      return {
              TAG: "Loaded",
              countryOptions: action._0,
              searchInput: ""
            };
    } else {
      return state;
    }
  } else if (typeof state !== "object") {
    return state;
  } else {
    return {
            TAG: "Loaded",
            countryOptions: state.countryOptions,
            searchInput: action._0
          };
  }
}

function CountrySelect(props) {
  var onChange = props.onChange;
  var match = React.useReducer(reducer, "Initial");
  var dispatch = match[1];
  var state = match[0];
  var viewportRef = React.useRef(null);
  React.useEffect((function () {
          var controller = new AbortController();
          dispatch("StartLoading");
          Fetch.get("https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json", Caml_option.some(controller.signal)).then(function (prim) {
                  return prim.json();
                }).then(function (json) {
                var countries = parseCountries(json);
                if (countries !== undefined) {
                  return dispatch({
                              TAG: "Load",
                              _0: countries
                            });
                } else {
                  return dispatch("Error");
                }
              });
          return (function () {
                    controller.abort();
                  });
        }), []);
  if (typeof state !== "object") {
    switch (state) {
      case "Initial" :
          return "initial";
      case "Loading" :
          return "loading";
      case "Error" :
          return "error";
      
    }
  } else {
    var searchInput = state.searchInput;
    var countryOptions = state.countryOptions;
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                        children: Core__Option.getOr(Core__Option.flatMap(Core__Option.flatMap(props.country, (function (country) {
                                        return countryOptions.find(function (countryOption) {
                                                    return countryOption.value === country;
                                                  });
                                      })), (function (countryOption) {
                                    return Caml_option.some(JsxRuntime.jsxs("div", {
                                                    children: [
                                                      JsxRuntime.jsx("span", {
                                                            className: "fi fi-" + countryOption.value
                                                          }),
                                                      " ",
                                                      countryOption.label
                                                    ]
                                                  }));
                                  })), null)
                      }),
                  JsxRuntime.jsx("input", {
                        value: searchInput,
                        onChange: (function (e) {
                            dispatch({
                                  TAG: "SetSearchInput",
                                  _0: e.target.value
                                });
                          })
                      }),
                  JsxRuntime.jsx("div", {
                        children: countryOptions.filter(function (countryOption) {
                                return countryOption.label.toLowerCase().includes(searchInput.trim().toLowerCase());
                              }).map(function (countryOption) {
                              return JsxRuntime.jsxs("div", {
                                          children: [
                                            JsxRuntime.jsx("span", {
                                                  className: "fi fi-" + countryOption.value
                                                }),
                                            " ",
                                            countryOption.label
                                          ],
                                          onClick: (function (param) {
                                              onChange(countryOption.value);
                                            })
                                        });
                            }),
                        ref: Caml_option.some(viewportRef),
                        className: css.dropdown,
                        onScroll: (function (param) {
                            Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
                                    console.log(viewport.scrollTop);
                                  }));
                          })
                      })
                ]
              });
  }
}

var initialState = "Initial";

var make = CountrySelect;

export {
  css ,
  parseCountries ,
  reducer ,
  initialState ,
  make ,
}
/* css Not a pure module */

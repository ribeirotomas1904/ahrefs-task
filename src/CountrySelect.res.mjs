// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fetch from "./Fetch.res.mjs";
import * as React from "react";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__JSON from "@rescript/core/src/Core__JSON.res.mjs";
import * as Extensions from "./Extensions.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import CountrySelectModuleCss from "./CountrySelect.module.css";

var css = CountrySelectModuleCss;

function parseCountries(json) {
  return Core__Option.flatMap(Core__JSON.Decode.array(json), (function (value) {
                return Extensions.$$Array.sequence(value.map(function (value) {
                                return Core__Option.flatMap(Core__JSON.Decode.object(value), (function (value) {
                                              var match = Object.entries(value).length === 2;
                                              var match$1 = Core__Option.flatMap(value["label"], Core__JSON.Decode.string);
                                              var match$2 = Core__Option.flatMap(value["value"], Core__JSON.Decode.string);
                                              if (match && match$1 !== undefined && match$2 !== undefined) {
                                                return {
                                                        label: match$1,
                                                        value: match$2
                                                      };
                                              }
                                              
                                            }));
                              }));
              }));
}

function reducer(state, action) {
  if (typeof action !== "object") {
    if (action === "StartLoading") {
      if (typeof state !== "object" && state === "Initial") {
        return "Loading";
      } else {
        return state;
      }
    } else if (typeof state !== "object" && state === "Loading") {
      return "Error";
    } else {
      return state;
    }
  }
  switch (action.TAG) {
    case "Load" :
        if (typeof state !== "object" && state === "Loading") {
          return {
                  TAG: "Loaded",
                  countryOptions: action._0,
                  searchInput: "",
                  optionsViewportStart: 0,
                  optionsViewportEnd: 19,
                  isDropdownOpen: false,
                  countryOptionHeight: 0.0
                };
        } else {
          return state;
        }
    case "SetSearchInput" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: action._0,
                  optionsViewportStart: state.optionsViewportStart,
                  optionsViewportEnd: state.optionsViewportEnd,
                  isDropdownOpen: state.isDropdownOpen,
                  countryOptionHeight: state.countryOptionHeight
                };
        }
    case "SetOptionsViewport" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: state.searchInput,
                  optionsViewportStart: action.optionsViewportStart,
                  optionsViewportEnd: action.optionsViewportEnd,
                  isDropdownOpen: state.isDropdownOpen,
                  countryOptionHeight: state.countryOptionHeight
                };
        }
    case "SetIsDropdownOpen" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: state.searchInput,
                  optionsViewportStart: 0,
                  optionsViewportEnd: 19,
                  isDropdownOpen: action._0,
                  countryOptionHeight: state.countryOptionHeight
                };
        }
    case "SetCountryOptionHeight" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: state.searchInput,
                  optionsViewportStart: state.optionsViewportStart,
                  optionsViewportEnd: state.optionsViewportEnd,
                  isDropdownOpen: state.isDropdownOpen,
                  countryOptionHeight: action._0
                };
        }
    
  }
}

function CountrySelect$CountryOption(props) {
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("span", {
                      className: "fi fi-" + props.value
                    }),
                props.label
              ],
              ref: Caml_option.some(props.onRef),
              className: css["country-option"],
              style: {
                position: "absolute",
                top: props.top,
                width: "100%"
              },
              tabIndex: 0,
              onKeyUp: props.onKeyUp,
              onClick: props.onClick
            });
}

var CountryOption = {
  make: CountrySelect$CountryOption
};

function CountrySelect(props) {
  var onChange = props.onChange;
  var __className = props.className;
  var className = __className !== undefined ? __className : "";
  var match = React.useReducer(reducer, "Initial");
  var dispatch = match[1];
  var state = match[0];
  var viewportRef = React.useRef(null);
  var countryOptionsRef = React.useRef({});
  React.useEffect((function () {
          var controller = new AbortController();
          dispatch("StartLoading");
          Fetch.get("https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json", Caml_option.some(controller.signal)).then(function (prim) {
                  return prim.json();
                }).then(function (json) {
                var countries = parseCountries(json);
                if (countries !== undefined) {
                  return dispatch({
                              TAG: "Load",
                              _0: countries
                            });
                } else {
                  return dispatch("Error");
                }
              });
          return (function () {
                    controller.abort();
                  });
        }), []);
  if (typeof state !== "object") {
    switch (state) {
      case "Initial" :
          return "initial";
      case "Loading" :
          return "loading";
      case "Error" :
          return "error";
      
    }
  } else {
    var countryOptionHeight = state.countryOptionHeight;
    var optionsViewportStart = state.optionsViewportStart;
    var searchInput = state.searchInput;
    var countryOptions = state.countryOptions;
    var countryOptionsFiltered = countryOptions.filter(function (countryOption) {
          return countryOption.label.toLowerCase().includes(searchInput.trim().toLowerCase());
        });
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                        children: Core__Option.getOr(Core__Option.flatMap(Core__Option.flatMap(props.country, (function (country) {
                                        return countryOptions.find(function (countryOption) {
                                                    return countryOption.value === country;
                                                  });
                                      })), (function (countryOption) {
                                    return Caml_option.some(JsxRuntime.jsxs("div", {
                                                    children: [
                                                      JsxRuntime.jsx("span", {
                                                            className: "fi fi-" + countryOption.value
                                                          }),
                                                      " ",
                                                      countryOption.label
                                                    ]
                                                  }));
                                  })), null)
                      }),
                  JsxRuntime.jsx("input", {
                        value: searchInput,
                        onFocus: (function (param) {
                            dispatch({
                                  TAG: "SetIsDropdownOpen",
                                  _0: true
                                });
                          }),
                        onChange: (function (e) {
                            dispatch({
                                  TAG: "SetSearchInput",
                                  _0: e.target.value
                                });
                          })
                      }),
                  state.isDropdownOpen ? JsxRuntime.jsx("div", {
                          children: JsxRuntime.jsx("div", {
                                children: countryOptionsFiltered.slice(Core__Int.clamp(0, undefined, optionsViewportStart - 10 | 0), (state.optionsViewportEnd + 1 | 0) + 10 | 0).map(function (countryOption, index) {
                                      return JsxRuntime.jsx(CountrySelect$CountryOption, {
                                                  label: countryOption.label,
                                                  value: countryOption.value,
                                                  onClick: (function (param) {
                                                      onChange(countryOption.value);
                                                      dispatch({
                                                            TAG: "SetIsDropdownOpen",
                                                            _0: false
                                                          });
                                                    }),
                                                  onKeyUp: (function (e) {
                                                      e.preventDefault();
                                                      var match = e.code;
                                                      switch (match) {
                                                        case "ArrowDown" :
                                                            return Core__Option.forEach(countryOptionsRef.current[(index + 1 | 0).toString()], (function (prim) {
                                                                          prim.focus();
                                                                        }));
                                                        case "ArrowUp" :
                                                            return Core__Option.forEach(countryOptionsRef.current[(index - 1 | 0).toString()], (function (prim) {
                                                                          prim.focus();
                                                                        }));
                                                        case "Enter" :
                                                            onChange(countryOption.value);
                                                            return dispatch({
                                                                        TAG: "SetIsDropdownOpen",
                                                                        _0: false
                                                                      });
                                                        case "Escape" :
                                                            return dispatch({
                                                                        TAG: "SetIsDropdownOpen",
                                                                        _0: false
                                                                      });
                                                        default:
                                                          return ;
                                                      }
                                                    }),
                                                  onRef: (function (domRef) {
                                                      Core__Option.forEach((domRef == null) ? undefined : Caml_option.some(domRef), (function (domRef) {
                                                              countryOptionsRef.current[index.toString()] = domRef;
                                                              if (domRef.offsetHeight !== countryOptionHeight) {
                                                                return dispatch({
                                                                            TAG: "SetCountryOptionHeight",
                                                                            _0: domRef.offsetHeight
                                                                          });
                                                              }
                                                              
                                                            }));
                                                    }),
                                                  top: ((optionsViewportStart + index | 0) * countryOptionHeight).toString() + "px"
                                                }, countryOption.value);
                                    }),
                                style: {
                                  height: (countryOptionsFiltered.length * countryOptionHeight).toString() + "px",
                                  position: "absolute",
                                  width: "100%"
                                }
                              }),
                          ref: Caml_option.some(viewportRef),
                          className: css.dropdown,
                          style: {
                            height: (Math.min(countryOptionsFiltered.length, 20) * countryOptionHeight).toString() + "px"
                          },
                          onScroll: (function (param) {
                              Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
                                      var optionsViewportStart = Math.trunc(viewport.scrollTop / countryOptionHeight) | 0;
                                      dispatch({
                                            TAG: "SetOptionsViewport",
                                            optionsViewportStart: optionsViewportStart,
                                            optionsViewportEnd: (optionsViewportStart + 20 | 0) - 1 | 0
                                          });
                                    }));
                            })
                        }) : null
                ],
                className: className
              });
  }
}

var maxVisibleCountryOptions = 20;

var countryOptionsOutsideViewport = 10;

var initialState = "Initial";

var make = CountrySelect;

export {
  css ,
  maxVisibleCountryOptions ,
  countryOptionsOutsideViewport ,
  parseCountries ,
  reducer ,
  initialState ,
  CountryOption ,
  make ,
}
/* css Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.res.mjs";
import * as Fetch from "./Fetch.res.mjs";
import * as React from "react";
import * as Core__JSON from "@rescript/core/src/Core__JSON.res.mjs";
import * as Extensions from "./Extensions.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import CountrySelectModuleCss from "./CountrySelect.module.css";

var css = CountrySelectModuleCss;

function parseCountries(json) {
  return Core__Option.flatMap(Core__JSON.Decode.array(json), (function (value) {
                return Extensions.$$Array.sequence(value.map(function (value) {
                                return Core__Option.flatMap(Core__JSON.Decode.object(value), (function (value) {
                                              var match = Object.entries(value).length === 2;
                                              var match$1 = Core__Option.flatMap(value["label"], Core__JSON.Decode.string);
                                              var match$2 = Core__Option.flatMap(value["value"], Core__JSON.Decode.string);
                                              if (match && match$1 !== undefined && match$2 !== undefined) {
                                                return {
                                                        label: match$1,
                                                        value: match$2
                                                      };
                                              }
                                              
                                            }));
                              }));
              }));
}

function reducer(state, action) {
  if (typeof action !== "object") {
    if (action === "StartLoading") {
      if (typeof state !== "object" && state === "Initial") {
        return "Loading";
      } else {
        return state;
      }
    } else if (typeof state !== "object" && state === "Loading") {
      return "Error";
    } else {
      return state;
    }
  }
  switch (action.TAG) {
    case "Load" :
        if (typeof state !== "object" && state === "Loading") {
          return {
                  TAG: "Loaded",
                  countryOptions: action._0,
                  searchInput: "",
                  optionsViewportStart: 0,
                  optionsViewportEnd: 13,
                  isDropdownOpen: false,
                  countryOptionHeight: 0.0,
                  selectedCountryOption: 0
                };
        } else {
          return state;
        }
    case "SetSearchInput" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: action._0,
                  optionsViewportStart: state.optionsViewportStart,
                  optionsViewportEnd: state.optionsViewportEnd,
                  isDropdownOpen: state.isDropdownOpen,
                  countryOptionHeight: state.countryOptionHeight,
                  selectedCountryOption: state.selectedCountryOption
                };
        }
    case "SetOptionsViewport" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: state.searchInput,
                  optionsViewportStart: action.optionsViewportStart,
                  optionsViewportEnd: action.optionsViewportEnd,
                  isDropdownOpen: state.isDropdownOpen,
                  countryOptionHeight: state.countryOptionHeight,
                  selectedCountryOption: state.selectedCountryOption
                };
        }
    case "SetIsDropdownOpen" :
        var isDropdownOpen = action._0;
        if (typeof state !== "object" || state.isDropdownOpen === isDropdownOpen) {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: "",
                  optionsViewportStart: 0,
                  optionsViewportEnd: 13,
                  isDropdownOpen: isDropdownOpen,
                  countryOptionHeight: state.countryOptionHeight,
                  selectedCountryOption: 0
                };
        }
    case "SetCountryOptionHeight" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: state.searchInput,
                  optionsViewportStart: state.optionsViewportStart,
                  optionsViewportEnd: state.optionsViewportEnd,
                  isDropdownOpen: state.isDropdownOpen,
                  countryOptionHeight: action._0,
                  selectedCountryOption: state.selectedCountryOption
                };
        }
    case "SetSelectedCountryOption" :
        if (typeof state !== "object") {
          return state;
        } else {
          return {
                  TAG: "Loaded",
                  countryOptions: state.countryOptions,
                  searchInput: state.searchInput,
                  optionsViewportStart: state.optionsViewportStart,
                  optionsViewportEnd: state.optionsViewportEnd,
                  isDropdownOpen: state.isDropdownOpen,
                  countryOptionHeight: state.countryOptionHeight,
                  selectedCountryOption: action._0
                };
        }
    
  }
}

function CountrySelect$CountryOption(props) {
  var onCancelSelect = props.onCancelSelect;
  var onMouseEnter = props.onMouseEnter;
  var onChange = props.onChange;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("span", {
                      className: "fi fi-" + props.value
                    }),
                JsxRuntime.jsx("span", {
                      children: props.label
                    })
              ],
              ref: Caml_option.some(props.onRef),
              className: css["country-option"] + " " + (
                props.isSelected ? css["country-option-selected"] : ""
              ),
              style: {
                top: props.top
              },
              onClick: (function (param) {
                  onChange();
                }),
              onMouseEnter: (function (param) {
                  onMouseEnter();
                }),
              onTouchCancel: (function (param) {
                  onCancelSelect();
                }),
              onTouchEnd: (function (param) {
                  onChange();
                }),
              onTouchMove: (function (param) {
                  onCancelSelect();
                }),
              onTouchStart: (function (param) {
                  onMouseEnter();
                })
            });
}

var CountryOption = {
  make: CountrySelect$CountryOption
};

function CountrySelect(props) {
  var onChange = props.onChange;
  var __className = props.className;
  var className = __className !== undefined ? __className : "";
  var match = React.useReducer(reducer, "Initial");
  var dispatch = match[1];
  var state = match[0];
  var searchInputRef = React.useRef(null);
  var viewportRef = React.useRef(null);
  React.useEffect((function () {
          var controller = new AbortController();
          dispatch("StartLoading");
          Fetch.get("https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json", Caml_option.some(controller.signal)).then(function (prim) {
                  return prim.json();
                }).then(function (json) {
                var countries = parseCountries(json);
                if (countries !== undefined) {
                  return dispatch({
                              TAG: "Load",
                              _0: countries
                            });
                } else {
                  return dispatch("Error");
                }
              });
          return (function () {
                    controller.abort();
                  });
        }), []);
  if (typeof state !== "object") {
    var tmp;
    if (typeof state !== "object") {
      switch (state) {
        case "Initial" :
            tmp = "";
            break;
        case "Loading" :
            tmp = "Loading...";
            break;
        case "Error" :
            tmp = "Unexpected Error!";
            break;
        
      }
    } else {
      tmp = "";
    }
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsx("span", {
                                children: "Select country"
                              }),
                          JsxRuntime.jsx(Icon.TriangleIcon.make, {})
                        ],
                        className: css["selected-country"]
                      }),
                  JsxRuntime.jsx("div", {
                        children: JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(Icon.SearchIcon.make, {
                                      className: css["search-icon"]
                                    }),
                                JsxRuntime.jsx("input", {
                                      defaultValue: tmp,
                                      className: css["search-input"],
                                      disabled: true,
                                      placeholder: "Search"
                                    })
                              ],
                              className: css["search-input-container"]
                            }),
                        className: css.wrapper
                      })
                ],
                className: css["country-select"] + " " + className
              });
  }
  var selectedCountryOption = state.selectedCountryOption;
  var countryOptionHeight = state.countryOptionHeight;
  var optionsViewportEnd = state.optionsViewportEnd;
  var optionsViewportStart = state.optionsViewportStart;
  var searchInput = state.searchInput;
  var countryOptions = state.countryOptions;
  var countryOptionsWithIndex = countryOptions.filter(function (countryOption) {
          return countryOption.label.toLowerCase().includes(searchInput.trim().toLowerCase());
        }).map(function (countryOption, index) {
        return [
                countryOption,
                index
              ];
      });
  var onChangeHandler = function () {
    Core__Option.forEach(countryOptionsWithIndex[selectedCountryOption], (function (param) {
            onChange(param[0].value);
            dispatch({
                  TAG: "SetIsDropdownOpen",
                  _0: false
                });
            Core__Option.forEach(Caml_option.nullable_to_opt(searchInputRef.current), (function (prim) {
                    prim.blur();
                  }));
          }));
  };
  var onScroll = function () {
    Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
            var optionsViewportStart = Math.round(viewport.scrollTop / countryOptionHeight) | 0;
            dispatch({
                  TAG: "SetOptionsViewport",
                  optionsViewportStart: optionsViewportStart,
                  optionsViewportEnd: optionsViewportStart + 13 | 0
                });
          }));
    Core__Option.forEach(Caml_option.nullable_to_opt(searchInputRef.current), (function (prim) {
            prim.focus();
          }));
  };
  var match$1 = countryOptionsWithIndex.length > 0;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: Core__Option.getOr(Core__Option.flatMap(Core__Option.flatMap(props.country, (function (country) {
                                      return countryOptions.find(function (countryOption) {
                                                  return countryOption.value === country;
                                                });
                                    })), (function (countryOption) {
                                  return Caml_option.some(JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                  children: [
                                                    JsxRuntime.jsx("span", {
                                                          className: "fi fi-" + countryOption.value
                                                        }),
                                                    JsxRuntime.jsx("span", {
                                                          children: countryOption.label
                                                        }),
                                                    JsxRuntime.jsx(Icon.TriangleIcon.make, {})
                                                  ]
                                                }));
                                })), JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                children: [
                                  JsxRuntime.jsx("span", {
                                        children: "Select country"
                                      }),
                                  JsxRuntime.jsx(Icon.TriangleIcon.make, {})
                                ]
                              })),
                      className: css["selected-country"],
                      onClick: (function (param) {
                          Core__Option.forEach(Caml_option.nullable_to_opt(searchInputRef.current), (function (prim) {
                                  prim.focus();
                                }));
                        })
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(Icon.SearchIcon.make, {
                                      className: css["search-icon"]
                                    }),
                                JsxRuntime.jsx("input", {
                                      ref: Caml_option.some(searchInputRef),
                                      className: css["search-input"],
                                      placeholder: "Search",
                                      value: searchInput,
                                      onKeyDown: (function (e) {
                                          var match = e.code;
                                          switch (match) {
                                            case "ArrowDown" :
                                                e.preventDefault();
                                                var newSelectedCountryOption = selectedCountryOption + 1 | 0;
                                                var newSelectedCountryOption$1 = newSelectedCountryOption > (countryOptionsWithIndex.length - 1 | 0) ? 0 : newSelectedCountryOption;
                                                if (newSelectedCountryOption$1 === 0) {
                                                  Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
                                                          viewport.scrollTo({
                                                                top: 0.0
                                                              });
                                                        }));
                                                } else if (newSelectedCountryOption$1 < optionsViewportStart || newSelectedCountryOption$1 > optionsViewportEnd) {
                                                  Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
                                                          viewport.scrollTo({
                                                                top: (newSelectedCountryOption$1 - 13 | 0) * countryOptionHeight
                                                              });
                                                        }));
                                                }
                                                return dispatch({
                                                            TAG: "SetSelectedCountryOption",
                                                            _0: newSelectedCountryOption$1
                                                          });
                                            case "ArrowUp" :
                                                e.preventDefault();
                                                var newSelectedCountryOption$2 = selectedCountryOption - 1 | 0;
                                                var newSelectedCountryOption$3 = newSelectedCountryOption$2 < 0 ? countryOptionsWithIndex.length - 1 | 0 : newSelectedCountryOption$2;
                                                if (newSelectedCountryOption$3 === (countryOptionsWithIndex.length - 1 | 0)) {
                                                  Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
                                                          viewport.scrollTo({
                                                                top: countryOptionsWithIndex.length * countryOptionHeight
                                                              });
                                                          setTimeout((function () {
                                                                  viewport.scrollTo({
                                                                        top: countryOptionsWithIndex.length * countryOptionHeight
                                                                      });
                                                                }), 10);
                                                        }));
                                                } else if (newSelectedCountryOption$3 < optionsViewportStart || newSelectedCountryOption$3 > optionsViewportEnd) {
                                                  Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
                                                          viewport.scrollTo({
                                                                top: newSelectedCountryOption$3 * countryOptionHeight
                                                              });
                                                        }));
                                                }
                                                return dispatch({
                                                            TAG: "SetSelectedCountryOption",
                                                            _0: newSelectedCountryOption$3
                                                          });
                                            case "Enter" :
                                                return onChangeHandler();
                                            case "Escape" :
                                                dispatch({
                                                      TAG: "SetIsDropdownOpen",
                                                      _0: false
                                                    });
                                                return Core__Option.forEach(Caml_option.nullable_to_opt(searchInputRef.current), (function (prim) {
                                                              prim.blur();
                                                            }));
                                            default:
                                              return ;
                                          }
                                        }),
                                      onFocus: (function (param) {
                                          dispatch({
                                                TAG: "SetIsDropdownOpen",
                                                _0: true
                                              });
                                        }),
                                      onBlur: (function (e) {
                                          var relatedTarget = e.relatedTarget;
                                          if (relatedTarget == null) {
                                            return dispatch({
                                                        TAG: "SetIsDropdownOpen",
                                                        _0: false
                                                      });
                                          } else {
                                            return Core__Option.forEach(Caml_option.nullable_to_opt(viewportRef.current), (function (viewport) {
                                                          if (viewport.contains(relatedTarget)) {
                                                            return ;
                                                          } else {
                                                            return dispatch({
                                                                        TAG: "SetIsDropdownOpen",
                                                                        _0: false
                                                                      });
                                                          }
                                                        }));
                                          }
                                        }),
                                      onChange: (function (e) {
                                          dispatch({
                                                TAG: "SetSearchInput",
                                                _0: e.target.value
                                              });
                                        })
                                    })
                              ],
                              className: css["search-input-container"]
                            }),
                        state.isDropdownOpen ? (
                            match$1 ? JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          children: countryOptionsWithIndex.slice(optionsViewportStart, optionsViewportEnd + 1 | 0).map(function (param) {
                                                var countryOptionIndex = param[1];
                                                var countryOption = param[0];
                                                return JsxRuntime.jsx(CountrySelect$CountryOption, {
                                                            label: countryOption.label,
                                                            value: countryOption.value,
                                                            onChange: onChangeHandler,
                                                            onMouseEnter: (function () {
                                                                dispatch({
                                                                      TAG: "SetSelectedCountryOption",
                                                                      _0: countryOptionIndex
                                                                    });
                                                              }),
                                                            onCancelSelect: (function () {
                                                                dispatch({
                                                                      TAG: "SetSelectedCountryOption",
                                                                      _0: -1
                                                                    });
                                                              }),
                                                            onRef: (function (domRef) {
                                                                Core__Option.forEach((domRef == null) ? undefined : Caml_option.some(domRef), (function (domRef) {
                                                                        if (domRef.offsetHeight !== countryOptionHeight) {
                                                                          return dispatch({
                                                                                      TAG: "SetCountryOptionHeight",
                                                                                      _0: domRef.offsetHeight
                                                                                    });
                                                                        }
                                                                        
                                                                      }));
                                                              }),
                                                            top: (countryOptionIndex * countryOptionHeight).toString() + "px",
                                                            isSelected: countryOptionIndex === selectedCountryOption
                                                          }, countryOption.value);
                                              }),
                                          className: css["country-options-container"],
                                          style: {
                                            height: (countryOptionsWithIndex.length * countryOptionHeight).toString() + "px"
                                          }
                                        }),
                                    ref: Caml_option.some(viewportRef),
                                    className: css.dropdown,
                                    style: {
                                      height: (Math.min(countryOptionsWithIndex.length, 14) * countryOptionHeight + 5.0).toString() + "px"
                                    },
                                    tabIndex: -1,
                                    onScroll: (function (param) {
                                        onScroll();
                                      })
                                  }) : JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          children: "No options",
                                          className: css["no-options"]
                                        }),
                                    className: css.dropdown,
                                    tabIndex: -1
                                  })
                          ) : null
                      ],
                      className: css.wrapper
                    })
              ],
              className: css["country-select"] + " " + className
            });
}

var maxVisibleCountryOptions = 14;

var initialState = "Initial";

var make = CountrySelect;

export {
  css ,
  maxVisibleCountryOptions ,
  parseCountries ,
  reducer ,
  initialState ,
  CountryOption ,
  make ,
}
/* css Not a pure module */
